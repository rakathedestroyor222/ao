-- Initializing global variables with default values.
LatestGameState = LatestGameState or {}
Game = "tm1jYBC0F2gTZ0EuUQKq5q_esxITDFkAG6QEpLbpI9I" -- the new game process
local colors = {
    red = "\27[31m",
    green = "\27[32m",
    blue = "\27[34m",
    reset = "\27[0m",
    gray = "\27[90m"
}

-- Checks if two points are within a given range.
-- @param x1, y1: Coordinates of the first point.
-- @param x2, y2: Coordinates of the second point.
-- @param range: The maximum allowed distance between the points.
-- @return: Boolean indicating if the points are within the specified range.
local function inRange(x1, y1, x2, y2, range)
    return math.abs(x1 - x2) <= range and math.abs(y1 - y2) <= range
end

local function calcDistance(x1, y1, x2, y2)
    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))
end

local function selectDirection(source, target)
    local yDirection = ""
    if target.y == source.y then
        yDirection = ""
    elseif target.y < source.y then
        yDirection = "Up"
    else
        yDirection = "Down"
    end

    local xDirection = ""
    if target.x == source.x then
        xDirection = ""
    elseif target.x < source.x then
        xDirection = "Left"
    else
        xDirection = "Right"
    end

    return yDirection .. xDirection
end

-- Decides the next action based on player proximity and energy.
-- If any player is within range, it initiates an attack; otherwise, moves randomly.
local function decideNextAction()
    local player = LatestGameState.Players[ao.id]
    local targetInRange = false

    local minHealth = math.huge
    local minEnergy = math.huge
    local targetPlayer = nil

    -- Iterate through all players to find the opponent with the lowest health and energy
    for target, state in pairs(LatestGameState.Players) do
        if target ~= ao.id then
            if state.health < minHealth and state.energy < minEnergy then
                minHealth = state.health
                minEnergy = state.energy
                targetPlayer = state
            end
        end
    end

    if targetPlayer then
        -- Implement movement strategy to reach the selected opponent bot (e.g., move in circles)
        -- Code for movement strategy goes here

        -- Determine whether to fight or flee based on opponent's energy and health levels
        local shouldFight = false
        local fleeThreshold = 0.7 -- Threshold for fleeing (70% energy and health)

        if targetPlayer.energy / targetPlayer.maxEnergy < fleeThreshold and
           targetPlayer.health / targetPlayer.maxHealth < fleeThreshold then
            shouldFight = true
        end

        if shouldFight then
            print(colors.red .. "Engaging opponent." .. colors.reset)
            ao.send({ Target = Game, Action = "PlayerAttack", AttackEnergy = tostring(player.energy) })
        else
            print(colors.blue .. "Fleeing from opponent." .. colors.reset)
            -- Code for fleeing goes here
        end
    else
        print(colors.green .. "No opponent found." .. colors.reset)
    end
end

function SendGetGameStateEvent()
    ao.send({ Target = Game, Action = "GetGameState" })
end

-- Handler to print game announcements and trigger game state updates.
Handlers.add(
    "PrintAnnouncements",
    Handlers.utils.hasMatchingTag("Action", "Announcement"),
    function(msg)
        -- waiting to join game
        if msg.Event == "Started-Waiting-Period" then
            print("Auto-paying confirmation fees.")
            ao.send({ Target = Game, Action = "Transfer", Recipient = Game, Quantity = "1000" })
        elseif (msg.Event == "Tick" or msg.Event == "Started-Game") then
            SendGetGameStateEvent()
        end
        print(colors.green .. msg.Event .. ": " .. msg.Data .. colors.reset)
    end
)

-- Handler to update the game state upon receiving game state information.
Handlers.add(
    "UpdateGameState",
    Handlers.utils.hasMatchingTag("Action", "GameState"),
    function(msg)
        local json = require("json")
        LatestGameState = json.decode(msg.Data)

        -- Decide next action
        print("Deciding next action.")
        decideNextAction()
        -- Get next state
        SendGetGameStateEvent()

        print(json.encode(LatestGameState)) -- Printing the encoded game state for debugging
    end
)

-- Handler to automatically attack when hit by another player.
Handlers.add(
    "ReturnAttack",
    Handlers.utils.hasMatchingTag("Action", "Hit"),
    function(msg)
        local playerEnergy = LatestGameState.Players[ao.id].energy
        if not playerEnergy then
            print(colors.red .. "Unable to read energy." .. colors.reset)
            ao.send({ Target = Game, Action = "Attack-Failed", Reason = "Unable to read energy." })
        elseif playerEnergy == 0 then
            print(colors.red .. "Player has insufficient energy." .. colors.reset)
            ao.send({ Target = Game, Action = "Attack-Failed", Reason = "Player has no energy." })
        else
            print(colors.red .. "Returning attack." .. colors.reset)
            ao.send({ Target = Game, Action = "PlayerAttack", AttackEnergy = tostring(playerEnergy) })
        end
        ao.send({ Target = ao.id, Action = "Tick" })
    end
)
